{"version":3,"sources":["util/Queries.tsx","util/Util.tsx","components/charts/NamesCloud.tsx","components/charts/LineOverTime.tsx","App.tsx","reportWebVitals.ts","index.tsx"],"names":["NameAndCountQuery","gql","MediaAndCountQuery","uniquePerFormatter","unique_per","map","per","date_counts","ner","forEach","texts","text","date","format","parseISO","date_publish","countDates","name","nom_name","count","ner_aggregate","aggregate","dates","sort","a","b","queryString","require","NamesCloud","parse","window","location","search","start","end","useState","formattedData","setFormattedData","chartTest","useRef","useQuery","variables","startDate","endDate","notifyOnNetworkStatusChange","loading","incomingData","error","data","refetch","useEffect","console","log","slice","useLayoutEffect","am4core","am4themes_animated","chart","WordCloud","fontFamily","series","push","WordCloudSeries","randomness","rotationThreshold","dataFields","word","value","heatRules","labels","template","tooltipText","states","create","properties","fill","title","titles","fontSize","fontWeight","current","dispose","CircularProgress","style","padding","id","width","height","LineOverTime","formattedDates","setFormattedDates","media","length","allData","Object","keys","formatted","values","Date","am4charts","colors","step","xAxes","renderer","minGridDistance","valueAxis","yAxes","field","opposite","valueY","dateX","strokeWidth","yAxis","tensionX","showOnInit","createAxisAndSeries","legend","cursor","App","makeStyles","theme","createStyles","formControl","margin","spacing","minWidth","selectEmpty","marginTop","className","path","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","client","ApolloClient","uri","cache","InMemoryCache","ReactDOM","render","StrictMode","ApolloProvider","document","getElementById"],"mappings":"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","file":"static/js/main.f0f98874.chunk.js","sourcesContent":["import {gql} from \"@apollo/client\";\r\n\r\nconst NameAndCountQuery = gql(`\r\n        query MyQuery($startDate: String = \"\", $endDate: String = \"\") {\r\n            unique_per(where: {ner: {texts: {date_publish: {_gte: $startDate, _lte: $endDate}}}}, order_by: {ner_aggregate: {count: desc}}) {\r\n                nom_name\r\n                ner_aggregate(where: {texts: {date_publish: {_gte: $startDate, _lte: $endDate}}}) {\r\n                    aggregate {\r\n                        count\r\n                    }\r\n                }\r\n                ner(where: {texts: {date_publish: {_gte: $startDate, _lte: $endDate}}}) {\r\n                    texts(where: {date_publish: {_gte: $startDate, _lte: $endDate}}, distinct_on: url) {\r\n                        date_publish\r\n                    }\r\n                }\r\n            }\r\n        }\r\n    `);\r\n\r\nconst MediaAndCountQuery = gql(`\r\n        query MyQuery($startDate: String = \"\", $endDate: String = \"\", $media: String = \"\") {\r\n            unique_per(where: {ner: {texts: {date_publish: {_gte: $startDate, _lte: $endDate}, mass_media_name: {_eq: $media}}}}, order_by: {ner_aggregate: {count: desc}}) {\r\n                nom_name\r\n                ner_aggregate(where: {_and: {texts: {date_publish: {_gte: $startDate, _lte: $endDate}, mass_media_name: {_eq: $media}}}}) {\r\n                    aggregate {\r\n                        count\r\n                    }\r\n                }\r\n                ner(where: {texts: {date_publish: {_gte: $startDate, _lte: $endDate}, mass_media_name: {_eq: $media}}}) {\r\n                    texts(where: {date_publish: {_gte: $startDate, _lte: $endDate}, mass_media_name: {_eq: $media}}, distinct_on: url) {\r\n                        date_publish\r\n                        url\r\n                    }\r\n                }\r\n            }\r\n        }\r\n    `)\r\n\r\nconst MassMediaNamesQuery = gql(`\r\n        query MyQuery($startDate: String, $endDate: String) {\r\n            mass_media(distinct_on: mass_media_name, where: {date_publish: {_gte: $startDate, _lte: $endDate}}) {\r\n                mass_media_name\r\n            }\r\n        }\r\n    `)\r\n\r\n\r\nexport {MassMediaNamesQuery, MediaAndCountQuery, NameAndCountQuery}","import {format, parseISO} from \"date-fns\";\r\n\r\nconst countDates = (ner: any) => {\r\n    let date_counts: any = {}\r\n    ner.forEach((ner: any) => ner.texts.forEach((text: any) => {\r\n            let date = format(parseISO(text.date_publish), 'yyyy-MM-dd')\r\n            date_counts[date] = (date_counts[date] || 0) + 1;\r\n        }\r\n    ))\r\n    return date_counts\r\n}\r\n\r\nconst uniquePerFormatter = (unique_per: any) => {\r\n    return unique_per.map((per: any) => {\r\n        const date_counts = countDates(per.ner)\r\n\r\n        return {\r\n            name: per.nom_name,\r\n            count: per.ner_aggregate.aggregate.count,\r\n            dates: date_counts\r\n        }\r\n    }).sort((a: any, b: any) => b.count - a.count);\r\n}\r\n\r\n// const getTop100 = () => {\r\n//     console.log(\"DATA\", nameData)\r\n//\r\n//     const formatted = uniquePerFormatter(nameData.unique_per)\r\n//\r\n//     const top100 = formatted.slice(0, 100)\r\n//     setNERData(top100)\r\n//\r\n//     const top5 = formatted.slice(0, 5)\r\n//     setLineData(top5)\r\n//\r\n//     console.log(\"formatted\", formatted)\r\n//     console.log(\"top5\", top5)\r\n// }\r\n\r\n\r\nexport {countDates, uniquePerFormatter}","import React, {useEffect, useLayoutEffect, useRef, useState} from \"react\";\r\nimport * as am4core from \"@amcharts/amcharts4/core\";\r\nimport am4themes_animated from \"@amcharts/amcharts4/themes/animated\";\r\nimport {WordCloud, WordCloudSeries} from \"@amcharts/amcharts4/plugins/wordCloud\";\r\nimport {NameAndCountQuery} from \"../../util/Queries\";\r\nimport {useQuery} from \"@apollo/client\";\r\nimport {uniquePerFormatter} from \"../../util/Util\";\r\nimport {CircularProgress} from \"@material-ui/core\";\r\n\r\nconst queryString = require('query-string');\r\n\r\nconst NamesCloud = () => {\r\n    const {start, end} = queryString.parse(window.location.search);\r\n    const [formattedData, setFormattedData] = useState([])\r\n    const chartTest = useRef<any>(null);\r\n\r\n\r\n    const {\r\n        loading,\r\n        error,\r\n        data: incomingData,\r\n        refetch\r\n    } = useQuery(NameAndCountQuery, {\r\n        variables: {\r\n            startDate: start + \" 00:00:00\",\r\n            endDate: end + \" 24:00:00\"\r\n        },\r\n        notifyOnNetworkStatusChange: true,\r\n    });\r\n\r\n    useEffect(() => {\r\n        if (incomingData) {\r\n            console.log(incomingData)\r\n            const data = uniquePerFormatter(incomingData.unique_per).slice(0, 100)\r\n            console.log(data)\r\n            setFormattedData(data)\r\n        }\r\n\r\n    }, [incomingData])\r\n\r\n\r\n    useLayoutEffect(() => {\r\n        am4core.useTheme(am4themes_animated);\r\n\r\n        let chart = am4core.create(\"chartdiv\", WordCloud);\r\n        chart.fontFamily = \"Courier New\";\r\n        let series = chart.series.push(new WordCloudSeries());\r\n        series.randomness = 0.1;\r\n        series.rotationThreshold = 0.5;\r\n\r\n        series.data = formattedData;\r\n\r\n        series.dataFields.word = \"name\";\r\n        series.dataFields.value = \"count\";\r\n\r\n        series.heatRules.push({\r\n            \"target\": series.labels.template,\r\n            \"property\": \"fill\",\r\n            \"min\": am4core.color(\"#0000CC\"),\r\n            \"max\": am4core.color(\"#CC00CC\"),\r\n            \"dataField\": \"value\"\r\n        });\r\n\r\n        // series.labels.template.url = \"https://stackoverflow.com/questions/tagged/{word}\";\r\n        // series.labels.template.urlTarget = \"_blank\";\r\n        series.labels.template.tooltipText = \"{word}: {value}\";\r\n\r\n        let hoverState = series.labels.template.states.create(\"hover\");\r\n        hoverState.properties.fill = am4core.color(\"#FF0000\");\r\n\r\n        // let subtitle = chart.titles.create();\r\n        // subtitle.text = \"(click to open)\";\r\n\r\n        let title = chart.titles.create();\r\n        title.text = \"Популярные имена\";\r\n        title.fontSize = 18;\r\n        title.fontWeight = \"700\";\r\n\r\n        chartTest.current = chart\r\n\r\n        return () => {\r\n            chart.dispose();\r\n        };\r\n    }, [formattedData]);\r\n\r\n    return (\r\n        <div>\r\n            {loading ? <CircularProgress style={{padding: 20}} /> : <div id=\"chartdiv\" style={{width: \"100%\", height: \"500px\"}}/>}\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default NamesCloud","import React, {useEffect, useLayoutEffect, useRef, useState} from \"react\";\r\nimport * as am4core from \"@amcharts/amcharts4/core\";\r\nimport * as am4charts from \"@amcharts/amcharts4/charts\";\r\nimport am4themes_animated from \"@amcharts/amcharts4/themes/animated\";\r\nimport {useQuery} from \"@apollo/client\";\r\nimport {uniquePerFormatter} from \"../../util/Util\";\r\nimport {MediaAndCountQuery, NameAndCountQuery} from \"../../util/Queries\";\r\nimport {CircularProgress} from \"@material-ui/core\";\r\n\r\nconst queryString = require('query-string');\r\n\r\n\r\nconst LineOverTime = () => {\r\n    const chartTest = useRef<any>(null);\r\n    const [formattedDates, setFormattedDates] = useState<any>([])\r\n    const [formattedData, setFormattedData] = useState([])\r\n    const {start, end, media} = queryString.parse(window.location.search);\r\n\r\n    console.log(start, end, media)\r\n\r\n    const {\r\n        loading,\r\n        error,\r\n        data: incomingData,\r\n        refetch\r\n    } = useQuery(media ? MediaAndCountQuery : NameAndCountQuery, {\r\n        variables: {\r\n            startDate: start + \" 00:00:00\",\r\n            endDate: end + \" 24:00:00\",\r\n            media: media ?? \"\"\r\n        },\r\n        notifyOnNetworkStatusChange: true,\r\n    });\r\n\r\n\r\n    useEffect(() => {\r\n        if (incomingData) {\r\n            console.log(incomingData)\r\n            const data = uniquePerFormatter(incomingData.unique_per).slice(0, 5)\r\n            console.log(data)\r\n\r\n            if (data.length > 0) {\r\n                setFormattedData(data)\r\n\r\n                let allData: any = {}\r\n                data.forEach((per: any) => {\r\n                    const dates = per.dates\r\n\r\n                    Object.keys(dates).forEach(date => allData[date] = {\r\n                        ...allData[date],\r\n                        date: date,\r\n                        [per.name]: dates[date]\r\n                    })\r\n                })\r\n                // @ts-ignore\r\n                let formatted = Object.values(allData).sort((a, b) => new Date(b.date) - new Date(a.date))\r\n                console.log('all data', formatted)\r\n                setFormattedDates(formatted)\r\n            }\r\n        }\r\n\r\n    }, [incomingData])\r\n\r\n\r\n    useLayoutEffect(() => {\r\n        am4core.useTheme(am4themes_animated);\r\n\r\n        let chart = am4core.create(\"linechart\", am4charts.XYChart);\r\n\r\n        chart.colors.step = 4;\r\n\r\n        chart.data = formattedDates;\r\n\r\n// Create axes\r\n        let dateAxis = chart.xAxes.push(new am4charts.DateAxis());\r\n        dateAxis.renderer.minGridDistance = 60;\r\n\r\n        let valueAxis = chart.yAxes.push(new am4charts.ValueAxis());\r\n\r\n// Create series\r\n        const createAxisAndSeries = (field: string, name: string, opposite: boolean) => {\r\n            let series = chart.series.push(new am4charts.LineSeries());\r\n            series.dataFields.valueY = field;\r\n            series.dataFields.dateX = \"date\";\r\n            series.strokeWidth = 2;\r\n            series.yAxis = valueAxis;\r\n            series.name = name;\r\n            series.tooltipText = \"{name}: [bold]{valueY}[/]\";\r\n            series.tensionX = 0.8;\r\n            series.showOnInit = true;\r\n        }\r\n        formattedData.forEach((per: any) => createAxisAndSeries(per.name, per.name, false))\r\n\r\n        // Add legend\r\n        chart.legend = new am4charts.Legend();\r\n\r\n        // Add cursor\r\n        chart.cursor = new am4charts.XYCursor();\r\n\r\n        let title = chart.titles.create();\r\n        if (formattedDates.length > 0) {\r\n            title.text = `Топ 5 имен ${media ?? \"\"} за (${start} - ${end})`;\r\n        } else {\r\n            title.text = 'Топ 5 имен'\r\n        }\r\n        title.fontSize = 18;\r\n        title.fontWeight = \"700\";\r\n\r\n        chartTest.current = chart\r\n\r\n        return () => {\r\n            chart.dispose();\r\n        };\r\n    }, [formattedDates]);\r\n\r\n    return (\r\n        <div>\r\n            {loading ? <CircularProgress style={{padding: 20}} /> : <div id={\"linechart\"} style={{width: \"100%\", height: \"500px\"}}/>}\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default LineOverTime","import React, {useEffect, useState} from 'react';\r\nimport {gql, useQuery} from '@apollo/client';\r\nimport {DateRange} from 'react-date-range';\r\nimport {format, parseISO} from \"date-fns\"; // theme css file\r\nimport {\r\n    Button,\r\n    createStyles,\r\n    FormControl,\r\n    Grid,\r\n    InputLabel,\r\n    makeStyles,\r\n    MenuItem,\r\n    Select,\r\n    Theme\r\n} from \"@material-ui/core\";\r\nimport {\r\n    HashRouter as Router,\r\n    Switch,\r\n    Route,\r\n    Link\r\n} from \"react-router-dom\";\r\n\r\n// import components\r\nimport NamesCloud from './components/charts/NamesCloud';\r\nimport LineOverTime from \"./components/charts/LineOverTime\";\r\nimport MediaChart from \"./components/charts/MediaChart\";\r\n\r\n// import styles\r\nimport 'react-date-range/dist/styles.css'; // main style file\r\nimport 'react-date-range/dist/theme/default.css';\r\nimport './App.css'\r\nimport {MassMediaNamesQuery, MediaAndCountQuery, NameAndCountQuery} from \"./util/Queries\";\r\nimport {uniquePerFormatter} from \"./util/Util\";\r\n\r\n\r\nconst useStyles = makeStyles((theme: Theme) =>\r\n    createStyles({\r\n        formControl: {\r\n            margin: theme.spacing(1),\r\n            minWidth: 120,\r\n        },\r\n        selectEmpty: {\r\n            marginTop: theme.spacing(2),\r\n        },\r\n    }),\r\n);\r\n\r\nconst App = () => {\r\n    // const TODAY = format(new Date(), 'yyyy-MM-dd')\r\n    // const classes = useStyles();\r\n    //\r\n    // const [NERData, setNERData] = useState<any>([])\r\n    // const [lineData, setLineData] = useState<any>([])\r\n    // const [mediaChartData, setMediaChartData] = useState<any>([])\r\n    // const [allMediaNames, setMediaNames] = useState<any>([])\r\n    // const [selectedMedia, setSelectedMedia] = useState('')\r\n    //\r\n    // const [selectedDateRange, setDateRange] = useState({\r\n    //     startDate: new Date(),\r\n    //     endDate: new Date(),\r\n    //     key: 'selection',\r\n    // })\r\n    //\r\n    // const {\r\n    //     loading: mediaNameLoading,\r\n    //     error: mediaNameError,\r\n    //     data: mediaNameData,\r\n    //     refetch: mediaNameRefetch\r\n    // } = useQuery(MassMediaNamesQuery, {\r\n    //     variables: {\r\n    //         startDate: \"2021-08-01\" + \" 00:00:00\",\r\n    //         endDate: \"2021-08-03\" + \" 24:00:00\"\r\n    //     },\r\n    //     notifyOnNetworkStatusChange: true,\r\n    // });\r\n    // console.log(mediaNameData)\r\n    //\r\n    // const {\r\n    //     loading: nameLoading,\r\n    //     error: nameError,\r\n    //     data: nameData,\r\n    //     refetch: nameRefetch\r\n    // } = useQuery(NameAndCountQuery, {\r\n    //     variables: {\r\n    //         startDate: TODAY + \" 00:00:00\",\r\n    //         endDate: TODAY + \" 24:00:00\"\r\n    //     },\r\n    //     notifyOnNetworkStatusChange: true,\r\n    // });\r\n    //\r\n    // const {\r\n    //     loading: mediaLoading,\r\n    //     error: mediaError,\r\n    //     data: mediaData,\r\n    //     refetch: mediaRefetch\r\n    // } = useQuery(MediaAndCountQuery, {\r\n    //     variables: {\r\n    //         startDate: TODAY + \" 00:00:00\",\r\n    //         endDate: TODAY + \" 24:00:00\",\r\n    //         media: \"\"\r\n    //     },\r\n    //     notifyOnNetworkStatusChange: true,\r\n    // });\r\n    //\r\n    // useEffect(() => {\r\n    //     if (mediaNameData) {\r\n    //         let names = mediaNameData.mass_media.map((media: any) => media.mass_media_name)\r\n    //         console.log(mediaNameData)\r\n    //         console.log(names)\r\n    //         setMediaNames(names)\r\n    //     }\r\n    // }, [mediaNameData])\r\n    //\r\n    // useEffect(() => {\r\n    //     if (nameData) {\r\n    //         console.log(\"DATA\", nameData)\r\n    //\r\n    //         const formatted = uniquePerFormatter(nameData.unique_per)\r\n    //\r\n    //         const top100 = formatted.slice(0, 100)\r\n    //         setNERData(top100)\r\n    //\r\n    //         const top5 = formatted.slice(0, 5)\r\n    //         setLineData(top5)\r\n    //\r\n    //         console.log(\"formatted\", formatted)\r\n    //         console.log(\"top5\", top5)\r\n    //\r\n    //     }\r\n    // }, [nameData])\r\n    //\r\n    // useEffect(() => {\r\n    //     if (mediaData) {\r\n    //         console.log(\"mediaData\", mediaData)\r\n    //\r\n    //         const formatted = uniquePerFormatter(mediaData.unique_per)\r\n    //\r\n    //         const top5 = formatted.slice(0, 5)\r\n    //\r\n    //         setMediaChartData(top5)\r\n    //\r\n    //         console.log(\"media formatted\", formatted)\r\n    //         console.log(\"top5\", top5)\r\n    //\r\n    //     }\r\n    // }, [mediaData])\r\n    //\r\n    // const handleDateSelect = (ranges: any) => {\r\n    //     console.log(ranges);\r\n    //     setDateRange(ranges.selection)\r\n    // }\r\n    //\r\n    // const fetchData = () => {\r\n    //     let start = selectedDateRange.startDate\r\n    //     let end = selectedDateRange.endDate\r\n    //     let media = selectedMedia\r\n    //     console.log(start, end)\r\n    //     console.log('refetched')\r\n    //\r\n    //     mediaNameRefetch({\r\n    //         startDate: format(start, 'yyyy-MM-dd') + \"00:00:00\",\r\n    //         endDate: format(end, 'yyyy-MM-dd') + \"23:59:59\"\r\n    //     })\r\n    //\r\n    //     nameRefetch({\r\n    //         startDate: format(start, 'yyyy-MM-dd') + \"00:00:00\",\r\n    //         endDate: format(end, 'yyyy-MM-dd') + \"23:59:59\"\r\n    //     })\r\n    //\r\n    //     if (selectedMedia) {\r\n    //         mediaRefetch({\r\n    //             startDate: format(start, 'yyyy-MM-dd') + \"00:00:00\",\r\n    //             endDate: format(end, 'yyyy-MM-dd') + \"23:59:59\",\r\n    //             media: media\r\n    //         })\r\n    //     }\r\n    // }\r\n    //\r\n    // const handleSelectedMediaChange = (event: React.ChangeEvent<{ value: unknown }>) => {\r\n    //     setSelectedMedia(event.target.value as string);\r\n    // }\r\n\r\n    return (\r\n        <div className=\"App\">\r\n            <Router>\r\n                <div>\r\n                    {/*<nav>*/}\r\n                    {/*    <ul>*/}\r\n                    {/*        <li>*/}\r\n                    {/*            <Link to=\"/\">Home</Link>*/}\r\n                    {/*        </li>*/}\r\n                    {/*        <li>*/}\r\n                    {/*            <Link to=\"/cloud\">Names Cloud</Link>*/}\r\n                    {/*        </li>*/}\r\n                    {/*        <li>*/}\r\n                    {/*            <Link to=\"/line\">Line Over Time</Link>*/}\r\n                    {/*        </li>*/}\r\n                    {/*    </ul>*/}\r\n                    {/*</nav>*/}\r\n\r\n                    {/* A <Switch> looks through its children <Route>s and\r\n            renders the first one that matches the current URL. */}\r\n                    <Switch>\r\n                        <Route path=\"/cloud\">\r\n                            <NamesCloud/>\r\n                        </Route>\r\n                        <Route path=\"/line\">\r\n                            <LineOverTime/>\r\n                        </Route>\r\n                        <Route path=\"/\">\r\n                            {/*<Home/>*/}\r\n                        </Route>\r\n                    </Switch>\r\n                </div>\r\n            </Router>\r\n            {/*<DateRange*/}\r\n            {/*    ranges={[selectedDateRange]}*/}\r\n            {/*    onChange={handleDateSelect}*/}\r\n            {/*/>*/}\r\n            {/*<Grid>*/}\r\n            {/*    <FormControl className={classes.formControl}>*/}\r\n            {/*        <InputLabel id=\"demo-simple-select-label\">Media</InputLabel>*/}\r\n            {/*        <Select*/}\r\n            {/*            labelId=\"demo-simple-select-label\"*/}\r\n            {/*            id=\"demo-simple-select\"*/}\r\n            {/*            value={selectedMedia}*/}\r\n            {/*            onChange={handleSelectedMediaChange}*/}\r\n            {/*        >*/}\r\n            {/*            {allMediaNames.map((media: string) => <MenuItem value={media}>{media}</MenuItem>)}*/}\r\n            {/*        </Select>*/}\r\n            {/*    </FormControl>*/}\r\n            {/*</Grid>*/}\r\n            {/*<Grid>*/}\r\n            {/*    <Button variant={\"contained\"} color={\"primary\"} onClick={fetchData}>Fetch data</Button>*/}\r\n            {/*</Grid>*/}\r\n            {/*<br/>*/}\r\n            {/*{nameLoading ?*/}\r\n            {/*    'loading...'*/}\r\n            {/*    :*/}\r\n            {/*    <Grid>*/}\r\n            {/*        <NamesCloud data={NERData}/>*/}\r\n            {/*        <LineOverTime chartId={\"top5\"} data={lineData}/>*/}\r\n            {/*        <LineOverTime chartId={\"mediaChart\"} data={mediaChartData} media={selectedMedia}/>*/}\r\n            {/*    </Grid>*/}\r\n            {/*}*/}\r\n        </div>\r\n    );\r\n};\r\n\r\nexport default App;\r\n","import { ReportHandler } from 'web-vitals';\r\n\r\nconst reportWebVitals = (onPerfEntry?: ReportHandler) => {\r\n  if (onPerfEntry && onPerfEntry instanceof Function) {\r\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\r\n      getCLS(onPerfEntry);\r\n      getFID(onPerfEntry);\r\n      getFCP(onPerfEntry);\r\n      getLCP(onPerfEntry);\r\n      getTTFB(onPerfEntry);\r\n    });\r\n  }\r\n};\r\n\r\nexport default reportWebVitals;\r\n","import React from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport './index.css';\r\nimport App from './App';\r\nimport reportWebVitals from './reportWebVitals';\r\nimport {ApolloClient, ApolloProvider, gql, InMemoryCache} from \"@apollo/client\";\r\n\r\nconst client = new ApolloClient({\r\n    uri: \"https://splendid-adder-68.hasura.app/v1/graphql\",\r\n    cache: new InMemoryCache()\r\n});\r\n\r\nReactDOM.render(\r\n    <React.StrictMode>\r\n        <ApolloProvider client={client}>\r\n            <App/>\r\n        </ApolloProvider>\r\n    </React.StrictMode>,\r\n    document.getElementById('root')\r\n);\r\n\r\n// If you want to start measuring performance in your app, pass a function\r\n// to log results (for example: reportWebVitals(console.log))\r\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\r\nreportWebVitals();\r\n"],"sourceRoot":""}